config("base") {
  include_dirs = [
    "bundle/core/asio/asio/include",
    "bundle/core/gsl/include",
    "bundle/core/optional",
    "include",
  ]
  ldflags = [
    "-lsodium",
  ]
  if (host_os != "mac") {
    ldflags += [ "-pthread" ]
  }
  defines = [ "ASIO_SODIUM_TARGET_PLATFORM_$target_os" ]
  cflags = [
  ]
  if (is_clang) {
    cflags += [
      "-Wno-unused-local-typedef", # asio fix
    ]
  } else if (is_gcc) {
    cflags += []
  }
}

template ("test_executable") {
  executable(target_name) {
    deps = invoker.deps
    configs += [ ":base" ]
    include_dirs = [
      "bundle/test/catch/include",
    ]
    sources = invoker.sources
  }
}

test_executable("tests") {
  deps = []
  sources = [
    "test/main.cpp",
    "test/handshake_hello.cpp",
    "test/handshake_response.cpp",
    "test/message_header.cpp",
    "test/handshake.cpp",
  ]
}

# TODO - move this to build project
# Use ninja to create a clang compilation database suitable for use with rtags
action("compdb") {
  script = "build/scripts/compdb.py"
  outputs = [
    "$root_out_dir/compile_commands.json",
    "$root_out_dir/always_run_compdb",
  ]
  args = [
    rebase_path(root_out_dir, root_build_dir),
    rebase_path("$root_out_dir/compile_commands.json", root_build_dir),
  ]
}

template ("test_runner") {
  action(target_name) {
    deps = invoker.deps
    script = "build/scripts/run_command.py"
    outputs = [ "$root_out_dir/always_run_test_runner" ]
    absolute_test_exe = rebase_path(invoker.test_exe, "/")
    args = [ "/$absolute_test_exe" ]
  }
}

test_runner("run_tests") {
  deps = [ ":tests" ]
  test_exe = "$root_out_dir/tests"
}
